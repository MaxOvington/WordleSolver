digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="main\n(below main)\n99.99%\n(0.00%)\n2×"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0000", fontcolor="#ff0000", fontsize="10.00", label="99.99%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x000000000001bb60" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="ld-linux-x86-64.so.2\n0x000000000001bb60\n100.00%\n(0.00%)\n0×"];
	"0x000000000001bb60" -> "(below main)" [arrowsize="1.00", color="#ff0000", fontcolor="#ff0000", fontsize="10.00", label="99.99%\n1×", labeldistance="4.00", penwidth="4.00"];
	"GOMP_parallel" [color="#fe0700", fontcolor="#ffffff", fontsize="10.00", label="libgomp.so.1.0.0\nGOMP_parallel\n99.34%\n(0.00%)\n1×"];
	"GOMP_parallel" -> "generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&) [clone ._omp_fn.0]" [arrowsize="1.00", color="#fe0700", fontcolor="#fe0700", fontsize="10.00", label="99.33%\n1×", labeldistance="3.97", penwidth="3.97"];
	"Graph::Graph(int)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="main\nGraph::Graph(int)\n0.63%\n(0.00%)\n1×"];
	"Graph::Graph(int)" -> "__memcpy_avx_unaligned_erms" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n624×", labeldistance="0.50", penwidth="0.50"];
	"Graph::search_match(bool, std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >&, bool)" [color="#e79404", fontcolor="#ffffff", fontsize="10.00", label="main\nGraph::search_match(bool, std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >&, bool)\n84.17%\n(84.13%)\n21768×"];
	"__memcpy_avx_unaligned_erms" [color="#0c5686", fontcolor="#ffffff", fontsize="10.00", label="libc.so.6\n__memcpy_avx_unaligned_erms\n15.13%\n(15.13%)\n639615×"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)" [color="#fe0800", fontcolor="#ffffff", fontsize="10.00", label="main\ndo_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)\n99.25%\n(0.00%)\n100×"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)" -> "do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" [arrowsize="1.00", color="#fe0800", fontcolor="#fe0800", fontsize="10.00", label="99.18%\n300×", labeldistance="3.97", penwidth="3.97"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" [color="#fe0800", fontcolor="#ffffff", fontsize="10.00", label="main\ndo_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2\n99.18%\n(0.03%)\n66888×"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" -> "Graph::search_match(bool, std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >&, bool)" [arrowsize="0.92", color="#e79404", fontcolor="#e79404", fontsize="10.00", label="84.17%\n21768×", labeldistance="3.37", penwidth="3.37"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" -> "__memcpy_avx_unaligned_erms" [arrowsize="0.38", color="#0c5486", fontcolor="#0c5486", fontsize="10.00", label="14.81%\n165149×", labeldistance="0.59", penwidth="0.59"];
	"do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" -> "do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)'2" [arrowsize="1.00", color="#fe0800", fontcolor="#fe0800", fontsize="10.00", label="66588×", labeldistance="3.97", penwidth="3.97"];
	"entropy(int, int, std::vector<int, std::allocator<int> >, Graph&)" [color="#fe0800", fontcolor="#ffffff", fontsize="10.00", label="main\nentropy(int, int, std::vector<int, std::allocator<int> >, Graph&)\n99.27%\n(0.00%)\n100×"];
	"entropy(int, int, std::vector<int, std::allocator<int> >, Graph&)" -> "do_entropy(int, std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, Graph&, int, int)" [arrowsize="1.00", color="#fe0800", fontcolor="#fe0800", fontsize="10.00", label="99.25%\n100×", labeldistance="3.97", penwidth="3.97"];
	"generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&)" [color="#fe0700", fontcolor="#ffffff", fontsize="10.00", label="main\ngenerate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&)\n99.35%\n(0.00%)\n1×"];
	"generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&)" -> "GOMP_parallel" [arrowsize="1.00", color="#fe0700", fontcolor="#fe0700", fontsize="10.00", label="99.34%\n1×", labeldistance="3.97", penwidth="3.97"];
	"generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&) [clone ._omp_fn.0]" [color="#fe0700", fontcolor="#ffffff", fontsize="10.00", label="main\ngenerate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&) [clone ._omp_fn.0]\n99.33%\n(0.00%)\n4×"];
	"generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&) [clone ._omp_fn.0]" -> "entropy(int, int, std::vector<int, std::allocator<int> >, Graph&)" [arrowsize="1.00", color="#fe0800", fontcolor="#fe0800", fontsize="10.00", label="99.27%\n100×", labeldistance="3.97", penwidth="3.97"];
	main [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="main\nmain\n99.99%\n(0.00%)\n1×"];
	main -> "Graph::Graph(int)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.63%\n1×", labeldistance="0.50", penwidth="0.50"];
	main -> "generate_entropy(int, std::vector<int, std::allocator<int> >&, Graph&)" [arrowsize="1.00", color="#fe0700", fontcolor="#fe0700", fontsize="10.00", label="99.35%\n1×", labeldistance="3.97", penwidth="3.97"];
}
